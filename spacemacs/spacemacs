;; -*- mode: emacs-lisp -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Configuration Layers declaration.
You should not put any user code in this function besides modifying the variable
values."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs-base
   ;; Lazy installation of layers (i.e. layers are installed only when a file
   ;; with a supported type is opened). Possible values are `all', `unused'
   ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
   ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
   ;; lazy install any layer that support lazy installation even the layers
   ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
   ;; installation feature and you have to explicitly list a layer in the
   ;; variable `dotspacemacs-configuration-layers' to install it.
   ;; (default 'unused)
   dotspacemacs-enable-lazy-installation 'unused
   ;; If non-nil then Spacemacs will ask for confirmation before installing
   ;; a layer lazily. (default t)
   dotspacemacs-ask-for-lazy-installation t
   ;; If non-nil layers with lazy install support are lazy installed.
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()
   ;; List of configuration layers to load.
   dotspacemacs-configuration-layers
   '(
     ;;
     ;; Customized Distribution
     ;;
     ;; spacemacs-completion
     (spacemacs-editing
      :packages (not hexl hungry-delete lorem-ipsum move-text))
     (spacemacs-editing-visual
      :packages highlight-indentation highlight-numbers highlight-parentheses)
     (spacemacs-evil :packages not (vi-tilde-fringe))
     spacemacs-org
     (spacemacs-ui
      :packages info+ restart-emacs)
     (spacemacs-ui-visual
      :packages fill-column-indicator golden-ration hl-todo (smooth-scrolling :location built-in) (not spaceline))

     ;;
     ;; Additional Layers
     ;;

     ;; Base
     better-defaults
     osx

     ;; Modes
     (org :variables
          org-projectile-file "/Users/jf019013/org/TODOs.org"
          org-enable-github-support t)
     (shell :variables
            shell-default-height 30
            shell-default-position 'bottom)

     ;; Version Control
     git
     github

     ;; Language layers
     emacs-lisp
     markdown
     scala
     go
     java
     (javascript
      :packages (not skewer-mode livid-mode web-beautify json-snatcher))
     (ruby :variables
           ruby-enable-enh-ruby-mode t
           ruby-rest-runner `rspec
           ruby-version-manager 'chruby)
     yaml

     ;; Completion
     auto-completion
     helm

     ;; Tools
     imenu-list
     syntax-checking

     ;; Misc
     spell-checking

     ;;
     ;; Custom Layers
     ;;

     ;; Doom Layers
     spacemacs-doom
     spacemacs-doom-popup
     spacemacs-doom-modeline
     spacemacs-doom-themes
     spacemacs-doom-vcs
     spacemacs-doom-neotree

     ;; General Language Layers
     java-c-style
     )
   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages, then consider creating a layer. You can also put the
   ;; configuration in `dotspacemacs/user-config'.
   dotspacemacs-additional-packages '()
   ;; A list of packages that cannot be updated.
   dotspacemacs-frozen-packages '()
   ;; A list of packages that will not be installed and loaded.
   dotspacemacs-excluded-packages
   '(
     skewer-mode livid-mode web-beautify json-snatcher)
   ;; Defines the behaviour of Spacemacs when installing packages.
   ;; Possible values are `used-only', `used-but-keep-unused' and `all'.
   ;; `used-only' installs only explicitly used packages and uninstall any
   ;; unused packages as well as their unused dependencies.
   ;; `used-but-keep-unused' installs only the used packages but won't uninstall
   ;; them if they become unused. `all' installs *all* packages supported by
   ;; Spacemacs and never uninstall them. (default is `used-only')
   dotspacemacs-install-packages 'used-only))

(defun dotspacemacs/init ()
  "Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration.
You should not put any user code in there besides modifying the variable
values."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; If non nil ELPA repositories are contacted via HTTPS whenever it's
   ;; possible. Set it to nil if you have no way to use HTTPS in your
   ;; environment, otherwise it is strongly recommended to let it set to t.
   ;; This variable has no effect if Emacs is launched with the parameter
   ;; `--insecure' which forces the value of this variable to nil.
   ;; (default t)
   dotspacemacs-elpa-https t
   ;; Maximum allowed time in seconds to contact an ELPA repository.
   dotspacemacs-elpa-timeout 5
   ;; If non nil then spacemacs will check for updates at startup
   ;; when the current branch is not `develop'. Note that checking for
   ;; new versions works via git commands, thus it calls GitHub services
   ;; whenever you start Emacs. (default nil)
   dotspacemacs-check-for-update nil
   ;; If non-nil, a form that evaluates to a package directory. For example, to
   ;; use different package directories for different Emacs versions, set this
   ;; to `emacs-version'.
   dotspacemacs-elpa-subdirectory nil
   ;; One of `vim', `emacs' or `hybrid'.
   ;; `hybrid' is like `vim' except that `insert state' is replaced by the
   ;; `hybrid state' with `emacs' key bindings. The value can also be a list
   ;; with `:variables' keyword (similar to layers). Check the editing styles
   ;; section of the documentation for details on available variables.
   ;; (default 'vim)
   dotspacemacs-editing-style 'vim
   ;; If non nil output loading progress in `*Messages*' buffer. (default nil)
   dotspacemacs-verbose-loading t
   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner 'official
   ;; List of items to show in startup buffer or an association list of
   ;; the form `(list-type . list-size)`. If nil then it is disabled.
   ;; Possible values for list-type are:
   ;; `recents' `bookmarks' `projects' `agenda' `todos'."
   ;; List sizes may be nil, in which case
   ;; `spacemacs-buffer-startup-lists-length' takes effect.
   dotspacemacs-startup-lists '((recents . 5)
                                (projects . 7))
   ;; True if the home buffer should respond to resize events.
   dotspacemacs-startup-buffer-responsive t
   ;; Default major mode of the scratch buffer (default `text-mode')
   dotspacemacs-scratch-mode 'text-mode
   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press <SPC> T n to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(spacemacs-dark
                         spacemacs-light)
   ;; If non nil the cursor color matches the state color in GUI Emacs.
   dotspacemacs-colorize-cursor-according-to-state t
   ;; Default font, or prioritized list of fonts. `powerline-scale' allows to
   ;; quickly tweak the mode-line size to make separators look not too crappy.
   dotspacemacs-default-font '("Source Code Pro"
                               :size 16
                               :weight semibold
                               :width normal
                               :powerline-scale 1.1)
   ;; The leader key
   dotspacemacs-leader-key "SPC"
   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key ","
   ;; Major mode leader key accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m)
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   ;; The key used for Emacs commands (M-x) (after pressing on the leader key).
   ;; (default "SPC")
   dotspacemacs-emacs-command-key "SPC"
   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs C-i, TAB and C-m, RET.
   ;; Setting it to a non-nil value, allows for separate commands under <C-i>
   ;; and TAB or <C-m> and RET.
   ;; In the terminal, these pairs are generally indistinguishable, so this only
   ;; works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab nil
   ;; If non nil `Y' is remapped to `y$' in Evil states. (default nil)
   dotspacemacs-remap-Y-to-y$ t
   ;; If non-nil, the shift mappings `<' and `>' retain visual state if used
   ;; there. (default t)
   dotspacemacs-retain-visual-state-on-shift t
   ;; If non-nil, J and K move lines up and down when in visual mode.
   ;; (default nil)
   dotspacemacs-visual-line-move-text nil
   ;; Name of the default layout (default "Default")
   ;; If non nil, inverse the meaning of `g' in `:substitute' Evil ex-command.
   ;; (default nil)
   dotspacemacs-ex-substitute-global nil
   ;; Name of the default layout (default "Default")
   dotspacemacs-default-layout-name "Default"
   ;; If non nil the default layout name is displayed in the mode-line.
   ;; (default nil)
   dotspacemacs-display-default-layout nil
   ;; If non nil then the last auto saved layouts are resume automatically upon
   ;; start. (default nil)
   dotspacemacs-auto-resume-layouts nil
   ;; Size (in MB) above which spacemacs will prompt to open the large file
   ;; literally to avoid performance issues. Opening a file literally means that
   ;; no major mode or minor modes are active. (default is 1)
   dotspacemacs-large-file-size 1
   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache
   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots 5
   ;; If non nil, `helm' will try to minimize the space it uses. (default nil)
   dotspacemacs-helm-resize nil
   ;; if non nil, the helm header is hidden when there is only one source.
   ;; (default nil)
   dotspacemacs-helm-no-header nil
   ;; define the position to display `helm', options are `bottom', `top',
   ;; `left', or `right'. (default 'bottom)
   dotspacemacs-helm-position 'bottom
   ;; Controls fuzzy matching in helm. If set to `always', force fuzzy matching
   ;; in all non-asynchronous sources. If set to `source', preserve individual
   ;; source settings. Else, disable fuzzy matching in all sources.
   ;; (default 'always)
   dotspacemacs-helm-use-fuzzy 'always
   ;; If non nil the paste micro-state is enabled. When enabled pressing `p`
   ;; several times cycle between the kill ring content. (default nil)
   dotspacemacs-enable-paste-transient-state nil
   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4
   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'bottom
   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar t
   ;; If non nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup t
   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native nil
   ;; If non nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (default nil) (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup t
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency 90
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency 90
   ;; If non nil show the titles of transient states. (default t)
   dotspacemacs-show-transient-state-title t
   ;; If non nil show the color guide hint for transient state keys. (default t)
   dotspacemacs-show-transient-state-color-guide t
   ;; If non nil unicode symbols are displayed in the mode line. (default t)
   dotspacemacs-mode-line-unicode-symbols t
   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters the
   ;; point when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling t
   ;; If non nil line numbers are turned on in all `prog-mode' and `text-mode'
   ;; derivatives. If set to `relative', also turns on relative line numbers.
   ;; (default nil)
   dotspacemacs-line-numbers t
   ;; Code folding method. Possible values are `evil' and `origami'.
   ;; (default 'evil)
   dotspacemacs-folding-method 'evil
   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode nil
   ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
   ;; over any automatically added closing parenthesis, bracket, quote, etc…
   ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
   dotspacemacs-smart-closing-parenthesis nil
   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters 'all
   ;; If non nil advises quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server nil
   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   ;; (default '("ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now. (default nil)
   dotspacemacs-default-package-repository nil
   ;; Delete whitespace while saving buffer. Possible values are `all'
   ;; to aggressively delete empty line and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed'to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup 'changed
   ))

(defun dotspacemacs/user-init ()
  "Initialization function for user code.
It is called immediately after `dotspacemacs/init'.  You are free to put almost
any user code here.  The exception is org related code, which should be placed
in `dotspacemacs/user-config'."
  ;; Define custom macros
  (define-macros)

  (setq-default
    exec-path-from-shell-arguments () ; Don't load shell interactively to force loading of .bashrc
    mode-line-default-help-echo nil ; don't say anything on mode-line mouseover
    indicate-buffer-boundaries nil ; don't show where buffer starts/ends
    indicate-empty-lines nil       ; don't show empty lines
    fringes-outside-margins t      ; switches order of fringe and margin
    ;; Keep cursors and highlights in current window only
    cursor-in-non-selected-windows nil
    highlight-nonselected-windows nil
    ;; Disable bidirectional text support for slight performance bonus
    bidi-display-reordering nil
    ;; Remove continuation arrow on right fringe
    fringe-indicator-alist (delq (assq 'continuation fringe-indicator-alist)
                                  fringe-indicator-alist)

    blink-matching-paren nil ; don't blink--too distracting
    show-paren-delay 0.075
    uniquify-buffer-name-style nil
    visible-bell nil
    visible-cursor nil
    x-stretch-cursor t
    redisplay-dont-pause t         ; don't pause display on input
    show-help-function nil         ; hide :help-echo text
    resize-mini-windows 'grow-only
    max-mini-window-height 0.3

    ;; Color-coded state cursors
    evil-default-cursor (face-attribute 'cursor :background nil t)
    evil-normal-state-cursor 'box
    evil-emacs-state-cursor  `(,(face-attribute 'warning :foreground nil nil) box)
    evil-insert-state-cursor 'bar
    evil-visual-state-cursor 'hollow))

(defun dotspacemacs/user-config ()
  "Configuration function for user code.
This function is called at the very end of Spacemacs initialization after
layers configuration. You are free to put any user code."

  ;; Initialize UI
  (disable-theme 'spacemacs-dark) ;; Disable spacemacs theme to get full doom theme
  (defconst doom-fringe-size '3 "Default fringe width")
  (tooltip-mode -1) ; show tooltips in echo area
  (if (not window-system)
      (menu-bar-mode -1)
    (scroll-bar-mode -1)  ; no scrollbar
    (tool-bar-mode   -1)  ; no toolbar
    ;; full filename in frame title
    (setq frame-title-format '(buffer-file-name "%f" ("%b")))
    ;; ;; standardize fringe width
    (fringe-mode doom-fringe-size)
    (push `(left-fringe  . ,doom-fringe-size) default-frame-alist)
    (push `(right-fringe . ,doom-fringe-size) default-frame-alist)
    ;; ;; no fringe in the minibuffer
    (add-hook! (emacs-startup minibuffer-setup)
      (set-window-fringes (minibuffer-window) 0 0 nil))
    ;; Show tilde in margin on empty lines
    (define-fringe-bitmap 'tilde [64 168 16] nil nil 'center)
    (set-fringe-bitmap-face 'tilde 'fringe)
    ;; (setcdr (assq 'empty-line fringe-indicator-alist) 'tilde)
    )

  ;; Track ediff state
  (defvar doom-ediff-enabled nil)
  (add-hook! ediff-startup (setq doom-ediff-enabled t))
  (add-hook! ediff-quit    (setq doom-ediff-enabled nil))

  ;; add newline at end of file
  (setq require-final-newline 'visit-save)
  ;; make lines over 100 characters stand out
  (setq whitespace-style '(face empty tabs lines-tail trailing))
  ;; Turn on backup files
  (setq make-backup-files nil)

  (with-eval-after-load 'org
    ;; Set the org directory
    (setq org-directory "~/org/")

    ;; Set the default org agenda file
    (setq org-agenda-files (list "~/org/agenda.org"))

    ;; Set the default or notes file
    (setq org-default-notes-file "~/org/notes.org")
    )

  ;; Eclim configuration
  (setq eclim-eclipse-dirs "/Applications/Eclipse.app"
        eclim-executable "/Applications/Eclipse.app/Contents/Eclipse/eclim")
  (setq auto-completion-enable-snippets-in-popup t)
  (setq auto-completion-complete-with-key-sequence-delay 0.75)
  (setq help-at-pt-display-when-idle t)
  (setq help-at-pt-timer-delay 0.5)
  (help-at-pt-set-timer)

  ;; Add support for Cerner hosted Enterprise Github repos 
  (eval-after-load "git-link"
    '(progn
       (add-to-list 'git-link-remote-alist
                    '("github.cerner.com" git-link-github))
       (add-to-list 'git-link-commit-remote-alist
                    '("github.cerner.com" git-link-commit-github)))))

  ;;
  ;; Scala Config
  ;;
  ;; Setup path
  ;; (setq exec-path (append exec-path '("/usr/local/bin")))


(defun define-macros ()
  (defmacro add-hook! (hook &rest func-or-forms)
    "A convenience macro for `add-hook'.
  HOOK can be one hook or a list of hooks. If the hook(s) are not quoted, -hook is
  appended to them automatically. If they are quoted, they are used verbatim.
  FUNC-OR-FORMS can be a quoted symbol, a list of quoted symbols, or forms. Forms will be
  wrapped in a lambda. A list of symbols will expand into a series of add-hook calls.
  Examples:
      (add-hook! 'some-mode-hook 'enable-something)
      (add-hook! some-mode '(enable-something and-another))
      (add-hook! '(one-mode-hook second-mode-hook) 'enable-something)
      (add-hook! (one-mode second-mode) 'enable-something)
      (add-hook! (one-mode second-mode) (setq v 5) (setq a 2))"
    (declare (indent defun) (debug t))
    (unless func-or-forms
      (error "add-hook!: FUNC-OR-FORMS is empty"))
    (let* ((val (car func-or-forms))
          (quoted (eq (car-safe hook) 'quote))
          (hook (if quoted (cadr hook) hook))
          (funcs (if (eq (car-safe val) 'quote)
                      (if (cdr-safe (cadr val))
                          (cadr val)
                        (list (cadr val)))
                    (list func-or-forms)))
          (forms '()))
      (mapc
      (lambda (f)
        (let ((func (cond ((symbolp f) `(quote ,f))
                          (t `(lambda (&rest _) ,@func-or-forms)))))
          (mapc
            (lambda (h)
              (push `(add-hook ',(if quoted h (intern (format "%s-hook" h))) ,func) forms))
            (-list hook)))) funcs)
      `(progn ,@forms)))

  (defmacro after! (feature &rest forms)
    "A smart wrapper around `with-eval-after-load', that supresses warnings
during compilation."
    (declare (indent defun) (debug t))
    `(,(if (or (not (boundp 'byte-compile-current-file))
               (not byte-compile-current-file)
               (if (symbolp feature)
                   (require feature nil :no-error)
                 (load feature :no-message :no-error)))
           'progn
         (message "after: cannot find %s" feature)
         'with-no-warnings)
      (with-eval-after-load ',feature ,@forms)))

  (after! evil
    (defalias 'ex! 'evil-ex-define-cmd)

    ;; NOTE evil-mode doesn't read local `evil-ex-commands', and will not
    ;; autocomplete local commands.
    (defun ex-local! (cmd fn)
      "Define a buffer-local ex command."
      (unless (local-variable-p 'evil-ex-commands)
        (setq-local evil-ex-commands (copy-alist evil-ex-commands)))
      (evil-ex-define-cmd cmd fn))

    ;; Register keywords for proper indentation (see `map!')
    (put ':prefix      'lisp-indent-function 'defun)
    (put ':map         'lisp-indent-function 'defun)
    (put ':after       'lisp-indent-function 'defun)
    (put ':when        'lisp-indent-function 'defun)
    (put ':unless      'lisp-indent-function 'defun)
    (put ':leader      'lisp-indent-function 'defun)
    (put ':localleader 'lisp-indent-function 'defun)

    (defmacro map! (&rest rest)
      (let ((i 0)
            (keymaps (if (boundp 'keymaps) keymaps))
            (default-keymaps '((current-global-map)))
            (state-map '(("n" . normal)
                        ("v" . visual)
                        ("i" . insert)
                        ("e" . emacs)
                        ("o" . operator)
                        ("m" . motion)
                        ("r" . replace)))
            (prefix (if (boundp 'prefix) prefix))
            key def states forms)
        (unless keymaps
          (setq keymaps default-keymaps))
        (while rest
          (setq key (pop rest))
          (push
          (reverse
            (cond ((listp key) ; it's a sub exp
                  `(,(macroexpand `(map! ,@key))))

                  ((keywordp key)
                  (when (memq key '(:leader :localleader))
                    (push (cond ((eq key :leader)
                                  doom-leader)
                                ((eq key :localleader)
                                  doom-localleader))
                          rest)
                    (setq key :prefix))
                  (pcase key
                    (:prefix  (setq prefix (concat prefix (kbd (pop rest)))) nil)
                    (:map     (setq keymaps (-list (pop rest))) nil)
                    (:unset  `(,(macroexpand `(map! ,(kbd (pop rest)) nil))))
                    (:after   (prog1 `((after! ,(pop rest)   ,(macroexpand `(map! ,@rest)))) (setq rest '())))
                    (:when    (prog1 `((if ,(pop rest)       ,(macroexpand `(map! ,@rest)))) (setq rest '())))
                    (:unless  (prog1 `((if (not ,(pop rest)) ,(macroexpand `(map! ,@rest)))) (setq rest '())))
                    (otherwise ; might be a state prefix
                      (mapc (lambda (letter)
                              (if (assoc letter state-map)
                                  (push (cdr (assoc letter state-map)) states)
                                (user-error "Invalid mode prefix %s in key %s" letter key)))
                            (split-string (substring (symbol-name key) 1) "" t))
                      (unless states
                        (user-error "Unrecognized keyword %s" key)) nil)))

                  ;; It's a key-def pair
                  ((or (stringp key)
                      (characterp key)
                      (vectorp key))
                  (when (stringp key)
                    (setq key (kbd key)))
                  (when prefix
                    (setq key (cond ((vectorp key) (vconcat prefix key))
                                    (t (concat prefix key)))))
                  (unless (> (length rest) 0)
                    (user-error "Map has no definition for %s" key))
                  (setq def (pop rest))
                  (let (out-forms)
                    (mapc (lambda (keymap)
                            (if states
                                (push `(evil-define-key ',states ,keymap ,key ,def) out-forms)
                              (push `(define-key ,keymap ,key ,def) out-forms)))
                          keymaps)
                    (setq states '())
                    out-forms))
                  (t (user-error "Invalid key %s" key))))
          forms)
          (setq i (1+ i)))
        `(progn ,@(apply #'nconc (delete nil (delete (list nil) (reverse forms)))))))))


;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(evil-want-Y-yank-to-eol t)
 '(package-selected-packages
   (quote
    (parent-mode flx google-c-style f smartparens iedit anzu highlight s packed dash helm helm-core popup imenu-list web-beautify livid-mode skewer-mode simple-httpd json-mode json-snatcher json-reformat js2-refactor multiple-cursors js2-mode js-doc company-tern dash-functional tern coffee-mode yaml-mode xterm-color smeargle shell-pop rvm ruby-tools ruby-test-mode rubocop rspec-mode robe reveal-in-osx-finder rbenv rake pbcopy osx-trash osx-dictionary orgit org-projectile org-present org org-pomodoro alert log4e gntp org-download noflet mwim multi-term mmm-mode minitest markdown-toc markdown-mode magit-gitflow magit-gh-pulls launchctl htmlize helm-gitignore helm-company helm-c-yasnippet go-eldoc gnuplot gitignore-mode github-search github-clone github-browse-file gitconfig-mode gitattributes-mode git-timemachine git-messenger git-link gist gh marshal logito pcache ht gh-md flyspell-correct-helm flyspell-correct flycheck-pos-tip pos-tip flycheck evil-magit magit magit-popup git-commit with-editor eshell-z eshell-prompt-extras esh-help ensime sbt-mode scala-mode enh-ruby-mode company-statistics company-go go-mode company-emacs-eclim eclim company chruby bundler inf-ruby auto-yasnippet yasnippet auto-dictionary ac-ispell auto-complete ws-butler window-numbering which-key volatile-highlights vi-tilde-fringe uuidgen use-package toc-org spacemacs-theme spaceline restart-emacs request rainbow-delimiters quelpa popwin persp-mode pcre2el paradox org-plus-contrib org-bullets open-junk-file neotree move-text macrostep lorem-ipsum linum-relative link-hint info+ indent-guide ido-vertical-mode hungry-delete hl-todo highlight-parentheses highlight-numbers highlight-indentation hide-comnt help-fns+ helm-themes helm-swoop helm-projectile helm-mode-manager helm-make helm-flx helm-descbinds helm-ag google-translate golden-ratio flx-ido fill-column-indicator fancy-battery eyebrowse expand-region exec-path-from-shell evil-visualstar evil-visual-mark-mode evil-unimpaired evil-tutor evil-surround evil-search-highlight-persist evil-numbers evil-nerd-commenter evil-mc evil-matchit evil-lisp-state evil-indent-plus evil-iedit-state evil-exchange evil-escape evil-ediff evil-args evil-anzu eval-sexp-fu elisp-slime-nav dumb-jump define-word column-enforce-mode clean-aindent-mode auto-highlight-symbol auto-compile aggressive-indent adaptive-wrap ace-window ace-link ace-jump-helm-line))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
